#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

function print_help() {
	echo "USAGE: nker [KERNEL]"
	echo ""
	echo "Either specify a kernel, or nker will pick the default one (as per eselect kernel)"
	echo "Kernel must match one of the following: "
	eselect kernel list | tail -n +2 | cut -f 6 -d ' ' | awk '{ print "    ", $0; }'
}

function cprintf() {
	# This requires the following arguments
	# $color $string
	if [ "$#" -ne 2 ]; then
		progress "error" "INVALID USAGE OF 'color_print'\n"
		progress "error" "PLEASE REPORT THIS TO A MAINTAINER\n"
		exit 1
	fi
	local color
	case "$1" in
		black)
			color=0
			;;
		red)
			color=1
			;;
		green)
			color=2
			;;
		yellow)
			color=3
			;;
		blue)
			color=4
			;;
		magenta)
			color=5
			;;
		cyan)
			color=6
			;;
		white)
			color=7
			;;
		*)
			progress "error" "INVALID COLOR '$1' PASSED TO 'cprintf'\n"
			progress "error" "PLEASE REPORT THIS TO A MAINTAINER\n"
			exit 1
	esac
	printf "%s$2%s" "$(tput setaf $color)" "$(tput sgr 0)"
}

function progress() {
	# This requires the following arguments
	# $type $message
	# $type is one of: header; info; log; error
	local scolor
	local mstart
	local mcolor
	local mtype
	case "$1" in
		header)
			scolor="green"
			mstart="$(tput bold)>>>> $(tput sgr 0)"
			mcolor="white"
			mtype="$(tput bold)"
			;;
		info)
			scolor="cyan"
			mstart=">>>> "
			mcolor="white"
			mtype=""
			;;
		log)
			scolor="cyan"
			mstart=">>>> "
			mcolor="blue"
			mtype="$(tput dim)"
			;;
		error)
			scolor="red"
			mstart="$(tput bold)>>>> $(tput sgr 0)"
			mcolor="red"
			mtype="$(tput bold)$(tput smul)"
			;;
		*)
			progress "error" "INVALID TYPE '$1' PASSED TO 'progress'\n"
			progress "error" "PLEASE REPORT THIS TO A MAINTAINER\n"
			exit 1
	esac
	cprintf "$scolor" "$mstart"
	cprintf "$mcolor" "$mtype$2$(tput sgr 0)"
}

function print_ok() {
	printf "%sâœ“%s\n" "$(tput setaf 2)$(tput bold)" "$(tput sgr 0)"
}

spinner() {
	local pid=$!
	local delay=0.2
	local sp="|/-\\"
	local n=${#sp}
	local i=0
	printf '  '
	while ps a | awk '{print $1}' | grep -q $pid; do
		printf "\b%s" "${sp:i++%n:1}"
		sleep $delay
	done
	printf "\b"
	print_ok
}

# Ensures user is running script as root.
function ensure_root() {
	if [ "$(id -u)" != "0" ]; then
		# If not root complain and exit.
		progress "error"  "Please run nker as root\n"
		exit 1
	fi
}

function validate_kernel() {
	# Matches WORD-NUM.NUM....-WORD
	local kernel_version_regex='^([^\s]+)-([0-9]+([.][0-9]+)+)-([^\s]+)$'
	if [[ "$1"	=~ ${kernel_version_regex} ]]; then
		# Valid
		return 0
	else
		# Invalid
		return 1
	fi
}

# Either use the eselected kernel, or the one from the CLI args
function pick_kernel() {
	local kernel
	if [ "$#" -eq 1 ]; then
		# Using user input
		# Validate input
		if ! validate_kernel "$1"; then
			# Invalid kernel version
			progress "error" "Invalid kernel version '$1'\n"
			echo ""
			print_help
			exit 1
		fi
		# Input is valid
		kernel="$1"
	elif [ "$#" -gt 1 ]; then
		# Invalid usage
		print_help
		exit 1
	else
		# Using eselected kernel
		kernel_temp="$(eselect kernel show | tail -n1 | cut -f 4 -d '/')"
		# Validate detected kernel
		if ! validate_kernel "${kernel_temp}"; then
			# Invalid kernel version
			progress "error" "Uh-oh, something went wrong selecting the default kernel\n"
			progress "error" "Output of 'eselect kernel show | tail -n1 | cut -f 4 -d '/'' = ${kernel_temp}\n"
			progress "error" "Please contact the maintainer with the above information\n"
			exit 1
		fi
		kernel="$kernel_temp"
	fi
	echo "${kernel}"
}

function check_kernel() {
	# Searches for $1 in available kernel list
	if eselect kernel list | tail -n +2 | cut -f 6 -d ' ' | grep -swq "$1"; then
		# Found
		return 0
	else
		# Not found
		return 1
	fi
}

# Check that selected kernel version exists
function verify_kernel() {
	local kernel="$1"
	if ! check_kernel "${kernel}"; then
		progress "error" "The selected {kernel} '${kernel}' does not exist\n"
		echo ""
		print_help
		exit 1
	fi
}

# Check that the kernel path exists
function verify_kernel_path() {
	local kernel_path="$1"
	local kernel="$2"
	if [ ! -d "${kernel_path}" ]; then
		progress "error" "Uh-oh, it seems like the source directory '${kernel_path}' for the selected kernel '${kernel}'\n"
		progress "error" "does not exist, even though eselect-kernel reports it as available!\n"
		progress "error" "Something is weird with your system. Please investigate.\n"
		print_help
		exit 1
	fi
}

function check_config() {
	# This requires the following argument:
	# kernel version being built
	# kver
	local kver
	kver="$1"
	local cfg_kver

    if [ ! -f .config ]; then
        progress "error" "No .config in $(pwd)"
        exit 1
    fi
	cfg_kver="linux-$(head -n4 < .config | grep 'Linux' | cut -f 3 -d ' ')"
	if [ "${kver}" == "${cfg_kver}" ]; then
		return 0
	else
		return 1
	fi
}

function build_kernel() {
	local kernel="$1"
	local kernel_path="$2"
	local logfile="$3"
	local cores
	cores="$(awk '/^processor/{print $3}' /proc/cpuinfo | wc -l)"

	pushd "${kernel_path}" >> "${logfile}" 2>&1 || exit 1

	renice -n 19 $$ >> "${logfile}" 2>&1
	progress "header" "Using $kernel\n"
	progress "header" "Beginning kernel build\n"

	if ! check_config "${kernel}"; then
		progress "info" "Running oldconfig\n"
		make -j"${cores}" oldconfig
	else
		progress "info" "Config already up-to-date "
		print_ok
	fi

	#progress "info" "Running clean"
	#make -j"${cores}" clean >> ${logfile} 2>&1 &
	#spinner

	progress "info" "Building bzImage"
	make -j"${cores}" bzImage >> "${logfile}" 2>&1 &
	spinner

	progress "info" "Building modules"
	make -j"${cores}" modules >> "${logfile}" 2>&1 &
	spinner

	progress "info" "Installing kernel"
	make -j"${cores}" install >> "${logfile}" 2>&1 &
	spinner

	progress "info" "Installing modules"
	make -j"${cores}" modules_install >> "${logfile}" 2>&1 &
	spinner

	popd >> "${logfile}" 2>&1 || exit 1
}

function rebuild_modules() {
	local logfile="$1"
	progress "info" "Rebuilding external modules"
	emerge @module-rebuild >> "${logfile}" 2>&1 &
	spinner
}

function build_initrd() {
	local kernel="$1"
	local logfile="$2"
	local dracut_kver
	progress "info" "Creating initrd"
	dracut_kver="$(cut -f 2- -d '-' <<< "${kernel}")"
	dracut --force '' "${dracut_kver}" >> "${logfile}" 2>&1 &
	spinner
}

function build_kernel_options() {
	local root="root=UUID=e4bce81c-6314-4db5-b473-551d3f0c1670"
	local rootfs="rootfstype=btrfs"
	local luks="rd.luks.uuid=a1932369-220f-4a01-9450-0ca784f8fbed"
	local quiet="quiet loglevel=2 rd.systemd.show_status=auto rd.udev.log_priority=3"
	local vga="i915.fastboot=1 vga=current"
	local misc="rw intel_iommu=on psmouse.synaptics_intertouch=1"
	local rescue="rd.shell"

	echo "${root} ${rootfs} ${luks} ${quiet} ${vga} ${misc} ${rescue}"
}

function create_boot_entry() {
	local distro_name="$1"
	local kernel_version="$2"
    local revision="$3"
	local logfile="$4"

    revision="$([ -z "${revision}" ] && echo "" || echo "-${revision}")"
    local entry_name="${distro_name}-${kernel_version}${revision}"
	local entry_path="/boot/loader/entries/${entry_name}.conf"

	tee "${entry_path}" >> "${logfile}" <<-EOF
		title ${entry_name}
		linux /vmlinuz-${kernel_version}-${distro_name}${revision}
		initrd /intel-uc.img
		initrd /initramfs-${kernel_version}-${distro_name}${revision}.img
        options $(build_kernel_options)
	EOF

    echo "${entry_name}"
}

function update_boot_default() {
	local entry_name="$1"
	local loader_path="/boot/loader/loader.conf"

	sed -i "s/default .*/default ${entry_name}/g" "${loader_path}" || exit 1
}

function update_systemd_boot() {
	local kernel="$1"
	local logfile="$2"

	local kernel_version
	local distro_name
    local revision
	kernel_version="$(cut -f 2 -d '-' <<< "${kernel}")"
	distro_name="$(cut -f 3 -d '-' <<< "${kernel}")"
    revision="$(cut -f 4 -d '-' <<< "${kernel}")"

	progress "info" "Updating systemd-boot"
	bootctl update >> "${logfile}" 2>&1

    local entry_name
	entry_name="$(create_boot_entry "${distro_name}" "${kernel_version}" "${revision}" "${logfile}")"
	update_boot_default "${entry_name}"
	print_ok
}

function verify_systemd_boot() {
	local status
	status="$(bootctl status)"

	if [[ ${status} == *"WARNING"* ]]; then
		progress "error" "INCONSISTENT SYSTEMD BOOT STATE\n"
		progress "error" "CHECK BOOTCTL AND FIX\n"
		exit 1
	fi
}

function clean_boot() {
	progress "info" "Cleaning old files "
	find "/boot" -maxdepth 1 -name \*.old -type f -delete
	print_ok
}

##############################################################################
# MAIN
##############################################################################

trap 'kill $(jobs -p) >> $logfile 2>&1' EXIT
logfile="/tmp/nker.log"

ensure_root

kernel="$(pick_kernel "${@}")"
verify_kernel "${kernel}"

kernel_path="/usr/src/$kernel"
verify_kernel_path "${kernel_path}" "${kernel}"

build_kernel "${kernel}" "${kernel_path}" "${logfile}"

rebuild_modules "${logfile}"

build_initrd "${kernel}" "${logfile}"

update_systemd_boot "${kernel}" "${logfile}"

verify_systemd_boot

clean_boot

progress "header" "Done!\n"
